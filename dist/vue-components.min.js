this.VuePort=this.VuePort||{},this.VuePort.Components=this.VuePort.Components||{},this.VuePort.Components.FishingUi=Vue.component("FishingUi",function(){const e={};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i={template:'<div class="fishing" data-reelpower="10" data-baitweight="1" data-progress="2" data-progresspenalty="3" data-progressupdaterate="200"> <div class="rod"> <div class="reel"> <div class="handle"></div> </div> </div> <div class="sea"> <div class="area"> <div class="bait" id="bait"></div> <div class="fish" data-movepremsec="1500" data-jumprange="100" data-speed="1000" data-depth="20" ><i class="fas fa-fish"></i></div> </div> </div> <div class="progress"> <div class="area"> <div class="bar" style="height:0%"></div> </div> </div> </div>',data:()=>({fish:{jumpRange:100,speed:1e3,depth:20,movepremsec:1500},rod:{reeling:!1,reelPower:10,baitWeight:1,progress:2,progressPenalty:3,progressUpdateRate:200,progressUpdated:!1}}),methods:{progressbar:(e,i)=>{let s=parseFloat($(".fishing .progress .bar")[0].style.height);i?s<100?$(".fishing .progress .bar").animate({height:s+$(".fishing").data("progress")+"%"},$(".fishing").data("progressupdaterate"),"linear"):ui.notification.info("Fish Caught!"):s>0&&$(".fishing .progress .bar").animate({height:s-e.rod.progressPenalty+"%"},e.rod.progressUpdateRate,"linear"),e.rod.progressUpdated=!1},reelgravity:e=>{$(".fishing .rod .reel .handle").addClass("reelout"),$("#bait").animate({top:"79%"},{duration:1e3*parseInt(e.rod.baitWeight),complete:function(){$(".fishing .rod .reel .handle").removeClass("reelout")},step:i=>{e.checkOverlapping(e)}})},checkOverlapping:e=>{let i=$("#bait")[0].getBoundingClientRect(),s=$(".fishing .sea .fish")[0].getBoundingClientRect(),t=!(i.right<s.left||i.left>s.right||i.bottom<s.top||i.top>s.bottom);e.rod.progressUpdated||(e.rod.progressUpdated=!0,clearTimeout(e.progressBarTimeout),e.progressBarTimeout=setTimeout(function(){e.progressbar(e,t)},e.rod.progressUpdateRate))}},computed:{fishStyle(){return`top: ${this.fish.depth};`}},watch:{},async created(){this.log=window.obligatoryFishingMinigame.log,this.baitTimer=setInterval(()=>{if(!window.obligatoryFishingMinigame.reeling)return $(".fishing .rod .reel .handle").removeClass("reelin"),$("#bait").stop(!0),this.reelgravity(this),void this.checkOverlapping(this);$(".fishing .rod .reel .handle").removeClass("reelout").addClass("reelin"),$("#bait").animate({top:"-="+$(".fishing").data("reelpower")+"%"},{easing:"linear",step:e=>{e<=0&&$("#bait").stop(!0),this.checkOverlapping(this)}})},400),this.moveFishTimer=setInterval(()=>{let e=parseInt($(".fishing .sea .fish")[0].style.top),i=Math.floor(Math.random()*e)+Math.abs(e-this.fish.jumpRange);$(".fishing .sea .fish").animate({top:(i<=89?i:89)+"%"},{duration:this.fish.speed,step:function(e){e<=0&&$(".fishing .sea .fish").stop(!0)}})},this.fish.movepremsec)},async mounted(){},destroyed(){clearInterval(this.baitTimer),clearInterval(this.moveFishTimer),clearTimeout(this.progressBarTimeout),console.log("Destroyed")}};return e.default=i,i}());